apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: kube-system

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  namespace: kube-system
rules:
- apiGroups:
    - ""
  resources:
    - nodes
    - pods
    - endpoints
    - services
    - nodes/proxy
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - extensions
  resources:
    - ingresses
  verbs: 
    - get
    - list
    - watch
- nonResourceURLs: 
    - "/metrics"
  verbs: 
    - "get"

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata: 
  name: prometheus
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: kube-system

---

apiVersion: apps/v1
kind: Deployment
metadata:
   name: prometheus
   namespace: kube-system
   labels:
      app: prometheus
spec:
   replicas: 1
   selector:
      matchLabels:
         app: prometheus
   template:
      metadata:
         labels:
              app: prometheus
      spec:
         serviceAccountName: prometheus
         tolerations:
            - key: node-role.kubernetes.io/master
              effect: NoSchedule
         containers:
            - name: prometheus
              image: prom/prometheus:v2.12.0
              imagePullPolicy: IfNotPresent
              command: 
               - "/bin/prometheus"
              args:
               - "--config.file=/etc/prometheus/prometheus.yml"
              ports:
               - containerPort: 9090
                 name: http
                 protocol: TCP
              resources:
                 limits:
                   memory: 200Mi
                 requests:
                   cpu: 100m
                   memory: 200Mi
              volumeMounts: 
                 - name: config-volume
                   mountPath: /etc/prometheus
                 - name: varlog
                   mountPath: /var/log
                 #- name: prometheus
                 #  mountPath: /var/lib/docker
                 #  readOnly: true
         terminationGracePeriodSeconds: 30
         volumes:
            - name: varlog
              hostPath: 
                   path: /var/log
            - name: config-volume
              configMap:
                 name: prometheus-config

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: kube-system
data:
  prometheus.yml: |  
   global:
    scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
    evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
  # Alertmanager configuration
  # alerting:
  #   alertmanagers:
  #    - static_configs:
  #      - targets:
  #        - 139.224.65.35:9093
   rule_files:
     - "rules/*.yml"
  # - "second_rules.yml"
   scrape_configs:
    - job_name: 'master'
      static_configs:
      - targets: ['192.168.139.128:9100']
      scrape_interval: 15s
    - job_name: 'node02'
      static_configs:
      - targets: ['192.168.139.129:9100']
      scrape_interval: 15s
    - job_name: 'node01'
      static_configs:
      - targets: ['192.168.139.130:9100']
      scrape_interval: 15s
    
---

apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: kube-system
  labels:
    app: prometheus
spec:
  selector:
     app: prometheus
  type: NodePort
  ports:
   - name: http
     port: 9100
     nodePort: 32258
     protocol: TCP
